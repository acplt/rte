#include "ov.ovm"
#include "propertyValueStatement.ovm" 
#include "identificationOPCUAInterface.ovm"
#include "opcua.ovm"

LIBRARY propertyValueStatementOPCUAInterface
	VERSION   = "V0.1 (DD-Mon-YYYY)";
	AUTHOR    = "";
	COPYRIGHT = "";
	COMMENT   = "";
	
	/**
		Documentation of interface.
		@note Javadoc syntax is allowed here.
		@attention Changes in this file will only generate new code in ./source/sourcetemplates/. Code in ./source/ is not overwritten. 
	*/
	CLASS interface : CLASS opcua/interface
		IS_INSTANTIABLE;
        COMMENT    =    "Implementations of nodestore functions to build up the interface between stack an ov-data";
        VARIABLES  
        END_VARIABLES;
        OPERATIONS
            ovNodeStoreInterfacePropertyValueStatementNew : C_FUNCTION <PVS_FNC_OVNODESTOREINTERFACEPROPERTYVALUESTATEMENTNEW>;
            ovNodeStoreInterfacePropertyValueStatementDelete : C_FUNCTION <PVS_FNC_OVNODESTOREINTERFACEPROPERTYVALUESTATEMENTDELETE>;
            
            ovPropertyValueStatementListNodeToOPCUA : C_FUNCTION <PVS_FNC_OVPROPERTYVALUESTATEMENTLISTNODETOOPCUA>;
            ovPropertyValueStatementNodeToOPCUA : C_FUNCTION <PVS_FNC_OVPROPERTYVALUESTATEMENTNODETOOPCUA>;
            ovPropertyValueStatementValueNodeToOPCUA : C_FUNCTION <PVS_FNC_OVPROPERTYVALUESTATEMENTVALUENODETOOPCUA>;
            ovExpressionLogicNodeToOPCUA : C_FUNCTION <PVS_FNC_OVEXPRESSIONLOGICNODETOOPCUA>;
            ovExpressionSemanticNodeToOPCUA : C_FUNCTION <PVS_FNC_OVEXPRESSIONSEMANTICNODETOOPCUA>;
            ovViewNodeToOPCUA : C_FUNCTION <PVS_FNC_OVVIEWNODETOOPCUA>;
            ovVisibilityNodeToOPCUA : C_FUNCTION <PVS_FNC_OVVISIBILITYNODETOOPCUA>;    
            
            constructor 	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
            destructor		: C_FUNCTION <OV_FNC_DESTRUCTOR>;
            checkNode       : C_FUNCTION <OPCUA_FNC_CHECKNODE>;
            checkReference  : C_FUNCTION <OPCUA_FNC_CHECKREFERENCE>; 
            nodeset			: C_FUNCTION <OPCUA_FNC_NODESET>;   
        END_OPERATIONS;
	END_CLASS;
	
	/**
		Add associations and their documentation here.
		Association syntax is:
	*/
	//ASSOCIATION assocName : ONE_TO_MANY
	//	PARENT parentVarName : CLASS ov/object;
	//	CHILD  childVarName : CLASS ov/object;
	//END_ASSOCIATION;
	
END_LIBRARY;
