#include "ov.ovm"
#include "opcua.ovm"
#include "services.ovm"

LIBRARY servicesOPCUAInterface
	VERSION   = "V0.1 (DD-Mon-YYYY)";
	AUTHOR    = "";
	COPYRIGHT = "";
	COMMENT   = "";
	
	/**
		Documentation of interface.
		@note Javadoc syntax is allowed here.
		@attention Changes in this file will only generate new code in ./source/sourcetemplates/. Code in ./source/ is not overwritten. 
	*/
	CLASS interface : CLASS opcua/interface
		IS_INSTANTIABLE;
        COMMENT    =    "Implementations of nodestore functions to build up the interface between stack an ov-data";
        OPERATIONS
        	//TODO move functions to own header.
            ovServiceNodeToOPCUA  : C_FUNCTION <SERVICES_FNC_OVSERVICENODETOOPCUA>;
            ovServiceVariablesNodeToOPCUA  : C_FUNCTION <SERVICES_FNC_OVSERVICEVARIABLESNODETOOPCUA>;
            ovServiceInputArgumentsNodeToOPCUA  : C_FUNCTION <SERVICES_FNC_OVSERVICEINPUTARGUMENTSNODETOOPCUA>;
            ovServiceOutputArgumentsNodeToOPCUA  : C_FUNCTION <SERVICES_FNC_OVSERVICEOUTPUTARGUMENTSNODETOOPCUA>;
            ovNodeStoreInterfaceServicesNew : C_FUNCTION <SERVICES_FNC_OVNODESTOREINTERFACESERVICESNEW>;
            ovNodeStoreInterfaceServicesDelete : C_FUNCTION <SERVICES_FNC_OVNODESTOREINTERFACESERVICESDELETE>;
            MethodCallback  : C_FUNCTION <SERVICES_FNC_METHODCALLBACKSTANDARD>;
            
            constructor 	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
            destructor		: C_FUNCTION <OV_FNC_DESTRUCTOR>;
            checkNode       : C_FUNCTION <OPCUA_FNC_CHECKNODE>;
            checkReference  : C_FUNCTION <OPCUA_FNC_CHECKREFERENCE>;
            nodeset			: C_FUNCTION <OPCUA_FNC_NODESET>;
        END_OPERATIONS;
	END_CLASS;
	
	/**
		Add associations and their documentation here.
		Association syntax is:
	*/
	//ASSOCIATION assocName : ONE_TO_MANY
	//	PARENT parentVarName : CLASS ov/object;
	//	CHILD  childVarName : CLASS ov/object;
	//END_ASSOCIATION;
	
END_LIBRARY;

