#include "ov.ovm"
#include "ksbase.ovm"

/*
    TODO: Create optional OV Networklayer again
*/


LIBRARY opcua
    VERSION   = "V0.2 (16-01-2019)";
    AUTHOR    = "Lars Evertz, Florian Palm, Torben Deppe, Julian Grothoff";
    COPYRIGHT = "";
    COMMENT   = "Implements an OPC UA server with access to the models in the ov system.";


    CLASS interface	:	CLASS ov/object
    	COMMENT = "Abstract class to define interface for an uaServer object. Holds the corresponding nodestores for UA Types and Transformations.";
    	VARIABLES
            trafo	:    C_TYPE <OPCUA_PTR_InformationModel>
                FLAGS = "n"
                COMMENT = "Information model to transform interface (hence library) specific ov objects to ua nodes.";
            types	:    C_TYPE <OPCUA_PTR_InformationModel>
                FLAGS = "n"
                COMMENT = "Information model to store interface (hence library) specific ua type nodes.";
			uri		:    STRING
    		   	IS_DERIVED
    		   	HAS_ACCESSORS
    		   	FLAGS = "i"
    		   	COMMENT = "Namespace (application) uri of trafo. For types an '/types' is added. For use in generic ov interface: acplt.org/<<LibraryName>>."; // See OPCUA_OVSTORE_DEFAULTNSURI_PREFIX and OPCUA_OVSTORE_DEFAULTNSURI_SUFFIX
    	END_VARIABLES;
    	OPERATIONS
            getaccess          :    C_FUNCTION <OV_FNC_GETACCESS>;
            load               :    C_FUNCTION <OPCUA_FNC_LOADINFORMATIONMODEL>;
            unload             :    C_FUNCTION <OPCUA_FNC_UNLOADINFORMATIONMODEL>;
            checkNodeId        :    C_FUNCTION <OPCUA_FNC_CHECKNODEID>;
        END_OPERATIONS;
    END_CLASS;
    
    CLASS ovInterface :	CLASS opcua/interface
    	IS_INSTANTIABLE;
    	COMMENT = "Generic interface for ov. Holds the corresponding nodestores for UA Types and Transformations.";
    	VARIABLES
    		entryPath : STRING
    			HAS_SET_ACCESSOR
    			COMMENT="Path to ov domain as entry point in UA. Default: '/'. Example: '/TechUnits'"
    			INITIALVALUE="/";	
    	END_VARIABLES;
    	OPERATIONS
        	constructor        :    C_FUNCTION <OV_FNC_CONSTRUCTOR>;
            destructor         :    C_FUNCTION <OV_FNC_DESTRUCTOR>;
            load               :    C_FUNCTION <OPCUA_FNC_LOADINFORMATIONMODEL>;
        END_OPERATIONS;
    END_CLASS;


    CLASS server        :    CLASS ksbase/ComTask
        IS_INSTANTIABLE;
        COMMENT = "Represents a UA Server with access to the OV Information model.";
        VARIABLES
        	//public variables
        	run                :    BOOL
        		HAS_SET_ACCESSOR
        		FLAGS = "i"
        	    COMMENT = "Toggle OPCUA server on or off.";
        	isRunning          :    BOOL
        		FLAGS = "o"
        	    COMMENT = "Determins, whether OPC UA server is running";
        	reset              :    BOOL
        		HAS_SET_ACCESSOR
        		FLAGS = "i"
        		COMMENT = "Shuts down the server and resets the error flag.";
        	error              :    BOOL
        		FLAGS = "o"
        	    COMMENT = "Determins, whether an error occured.";
        	errorText          :    STRING
        		FLAGS = "o"
        	    COMMENT = "Text of last error."
        	    INITIALVALUE = "";
        	//privat variables
            server             :    C_TYPE <OPCUA_PTR_UA_Server>
                FLAGS = "n"
                COMMENT = "Stack-specific representation of server data.";
        END_VARIABLES;
        PARTS
		    genericInterface   :	CLASS	opcua/ovInterface;
        END_PARTS;    
        OPERATIONS
        	startup            :    C_FUNCTION <OV_FNC_STARTUP>;
            shutdown           :    C_FUNCTION <OV_FNC_SHUTDOWN>;
            getaccess          :    C_FUNCTION <OV_FNC_GETACCESS>;
            typemethod         :    C_FUNCTION <KSBASE_FNC_TYPEMETHOD>;
        END_OPERATIONS;
    END_CLASS;

//TODO add reset method, to reset config to default values.
    CLASS serverConfig	:	CLASS ov/object
    	IS_INSTANTIABLE;
    	COMMENT = "Holds all configuration data for an OPC UA Server, that are configurable in the OV System. Should be placed beneath uaServer.";
    	VARIABLES
    		applicationURI     :    STRING
    		   	FLAGS = "i"
    		   	COMMENT = "Namespace 1 (Application) uri. Default is acplt.org/"
                INITIALVALUE   =    "acplt.org/"; // = opcua.ovt OPCUA_DEFAULT_APPLICATIONURI
            applicationName    :    STRING
               	FLAGS = "i"
               	COMMENT = "Name of the Appliction. Is replaced with ACPLT/RTE/SERVERNAME if left empty or NULL."
                INITIALVALUE   =    "";
            port               :	UINT
            	HAS_SET_ACCESSOR
            	FLAGS = "i"
            	COMMENT = "Has to be unique within the system, otherwise undefined behaviour. Default is 4840."
            	INITIALVALUE   =    4840;
    	END_VARIABLES;
    	OPERATIONS
            getaccess          :    C_FUNCTION <OV_FNC_GETACCESS>;
        END_OPERATIONS;
    END_CLASS;
    
    /*    
        Add associations and their documentation here.
        Association syntax is:
    */
    ASSOCIATION configToServer : ONE_TO_ONE
        PARENT server    : CLASS opcua/server;
        CHILD  config    : CLASS opcua/serverConfig;
    END_ASSOCIATION;
    
    ASSOCIATION serverToInterfaces : ONE_TO_MANY
        PARENT server    : CLASS opcua/server;
        CHILD  interfaces: CLASS opcua/interface;
    END_ASSOCIATION;
    
    ASSOCIATION interfaceDependency : MANY_TO_MANY
        PARENT parent    : CLASS opcua/interface;
        CHILD  child     : CLASS opcua/interface;
    END_ASSOCIATION;

END_LIBRARY;